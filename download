#!/bin/bash

# glibc mirror url
# URL1="http://archive.ubuntu.com/ubuntu/pool/main/g/glibc"
# URL2="http://archive.ubuntu.com/ubuntu-ports/pool/main/g/glibc"
URL1="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc"
URL2="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/pool/main/g/glibc/"

perfix="libc6_"
pathInDeb="lib"

dbg_perfix="libc6-dbg_"
dbg_pathInDeb="usr/lib/debug/lib"

if [[ $# -ne 3 ]]; then
	echo "Usage: $0 dbPath all|bin|dbg architectures"
    echo "Use \",\" to divide multiple architectures."
    echo "Architectures List: amd64,i386,arm64,armhf,ppc64el,s390x"
	exit 1
fi

die() {
  echo >&2 $1
  exit 1
}

get_glibc_deb(){
    local file="$1"
    local url="$2"
    local tmp=`mktemp -d`
    local dirname=${file%.deb}
    dirname=${dirname#${perfix}}
    echo "$file"

    if [[ -d $dbPath/$dirname ]];then
        echo "Path $dbPath/$dirname has been exsited."
        echo "Skip."
        return
    fi

    wget "$url/$file" -O "$tmp/pkg.deb" -q --tries=0 || die "Failed to download package from $url"
    pushd "$tmp" 1>/dev/null
    ar x "$tmp/pkg.deb" || die "ar failed"
    tar xf $tmp/data.tar.* || die "tar failed"
    popd 1>/dev/null
    local t=`ls $tmp/$pathInDeb | grep linux-gnu`
    mv "$tmp/$pathInDeb/$t" "$dbPath/$dirname/"
    rm -rf "$tmp"
}

get_glibc_all(){
    echo "Getting glibc index"
    local indexhtml=`mktemp`
    wget $URL1/ -O - -q | grep -Eo "href=\"${perfix}[^\"]*_($archs)\.deb\"" > $indexhtml
    local files1=`cat $indexhtml  | awk -F '"' '{print $2}'`
    local total=`wc -l $indexhtml | awk '{print $1}'`
    wget $URL2/ -O - -q | grep -Eo "href=\"${perfix}[^\"]*_($archs)\.deb\"" > $indexhtml
    local files2=`cat $indexhtml  | awk -F '"' '{print $2}'`
    (( total=total+`wc -l $indexhtml | awk '{print $1}'` ))
    rm $indexhtml
    echo "Start to download"
    local i=0
    for file in $files1 ; do
        echo $file
        echo -n -e "\033[35m\033[1m[$i/$total]\033[0m "
        get_glibc_deb "$file" "$URL1"
        ((i++))
    done
    for file in $files2 ; do
        echo -n -e "\033[35m\033[1m[$i/$total]\033[0m "
        get_glibc_deb "$file" "$URL2"
        ((i++))
    done
}


get_glibc_dbg_deb(){
    local file="$1"
    local url="$2"
    local tmp=`mktemp -d`
    local dirname=${file%.deb}
    dirname=${dirname#${dbg_perfix}}
    echo "$file"

    if [[ ! -d $dbPath/$dirname ]];then
        echo "Path $dbPath/$dirname doesn't exsited."
        echo "Skip."
        return
    fi

    if [[ -d $dbPath/$dirname/.debug ]];then
        echo "Path $dbPath/$dirname/.debug has been exsited."
        echo "Skip."
        return
    fi

    wget "$url/$file" -O "$tmp/pkg.deb" -q --tries=0 || die "Failed to download package from $url"
    pushd "$tmp" 1>/dev/null
    ar x "$tmp/pkg.deb" || die "ar failed"
    tar xf $tmp/data.tar.* || die "tar failed"
    popd 1>/dev/null
    local t=`ls $tmp/$dbg_pathInDeb | grep linux-gnu`
    mv "$tmp/$dbg_pathInDeb/$t" "$dbPath/$dirname/.debug"
    rm -rf "$tmp"
}

get_glibc_dbg_all(){
    echo "Getting glibc-dbg index"
    local indexhtml=`mktemp`
    wget $URL1/ -O - -q | grep -Eo "href=\"${dbg_perfix}[^\"]*_($archs)\.deb\"" > $indexhtml
    local files1=`cat $indexhtml  | awk -F '"' '{print $2}'`
    local total=`wc -l $indexhtml | awk '{print $1}'`
    wget $URL2/ -O - -q | grep -Eo "href=\"${dbg_perfix}[^\"]*_($archs)\.deb\"" > $indexhtml
    local files2=`cat $indexhtml  | awk -F '"' '{print $2}'`
    (( total=total+`wc -l $indexhtml | awk '{print $1}'` ))
    rm $indexhtml
    echo "Start to download"
    local i=0
    for file in $files1 ; do
        echo $file
        echo -n -e "\033[35m\033[1m[$i/$total]\033[0m "
        get_glibc_dbg_deb "$file" "$URL1"
        ((i++))
    done
    for file in $files2 ; do
        echo -n -e "\033[35m\033[1m[$i/$total]\033[0m "
        get_glibc_dbg_deb "$file" "$URL2"
        ((i++))
    done
}

dbPath="$1"
archs=`echo "$3" | cut -d "," -f1- --output-delimiter="|" `
mkdir -p $dbPath

if [ "$2"x == "all"x ];then
    get_glibc_all
    get_glibc_dbg_all
elif [ "$2"x == "bin"x ];then
    get_glibc_all
elif [ "$2"x == "dbg"x ];then
    get_glibc_dbg_all
else
    die "Unknow parameter \"$2\"."
fi

echo "Finish."