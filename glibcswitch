#!/bin/bash
if [[ $# -ne 3 ]]; then
	echo "Usage: $0 dbPath Glibc_Version|system Target_File"
	exit 1
fi

dbPath=`realpath "$1"`
pversion="$2"
targetFile="$3"
machine=`readelf $targetFile -h | grep Machine:`

if [[ $pversion == 'system' ]];then
	is32=`echo -n $machine | grep "Intel 80386" -o`
	if [[ -n $is32 ]]; then
		patchelf --set-interpreter /lib/ld-linux.so.2 --set-rpath /lib/i386-linux-gnu $targetFile
	else
		patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 --set-rpath /lib/x86_64-linux-gnu $targetFile
	fi
	exit 0
fi

if [[ -d $dbPath/$pversion ]]; then
	version=`echo $pversion | cut -d - -f1`
	patchelf --set-interpreter $dbPath/$pversion/ld-$version.so --set-rpath $dbPath/$pversion $targetFile
fi

list=`ls -1 "$dbPath" | grep "^$pversion"`

i=0
for file in $list;do
	ld_name=`ls $dbPath/$file/ld*.so`
	ld_machine=`readelf $ld_name -h | grep Machine:`
	if [[ "$machine"x == "$ld_machine"x ]];then
		filelist[$i]=$file
		((i++))
	fi
done

if [ $i == 0 ];then
	echo "No matching version."
elif [ $i == 1 ];then
	pversion="${filelist[0]}"
	echo "Select $pversion."
else
	echo "Avalibable Version:"
	i=0
	for file in ${filelist[@]};do
		echo "[$i] $file"
		((i++))
	done
	read -p "Please choose one: " index
	pversion="${filelist[$index]}"
fi

version=`echo $pversion | cut -d - -f1`
patchelf --set-interpreter $dbPath/$pversion/ld-$version.so --set-rpath $dbPath/$pversion $targetFile
